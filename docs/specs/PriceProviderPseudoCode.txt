const BobAddress;
const providerAddress; // price provider address

// below values should be obtained from deployment json file
const wFlr; //token contract
const priceEpochDurationSeconds;
const ftsoRegistry = priceSubmitter.getFtsoRegistry();
const voterWhitelister = priceSubmitter.getVoterWhitelister();
const FtsoIndexList { // get ftso indices for the desired symbols
    ftsoRegistry.getFtsoIndex("FXRP"), ftsoRegistry.getFtsoIndex("FTLC"), ftsoRegistry.getFtsoIndex("FXDG")
};
// ftsoRegistry.getSupportedSymbolsAndFtsos() can be used to return all available symbols and corresponding ftsos

// preliminary steps of wrapping flare and delegating vote power.
// these steps will usually be done in a different scope
/////////////////////////////////////////////////////////////////
// Bob wrapps 100 FLR
wFlr.deposit(){from: BobAddress, amount: 100};
// Bob delegates 100% of his vote power to a price provider
wFlr.delegate(providerAddress, percentToBips(100)){from: BobAddress};
// price provider steps
///////////////////////
main() {

    // First try to whtelist on all available ftsos
    voterWhitelister.requestFullVoterWhitelisting(providerAddress);
    uint step = 0;

    while (true) {
 
        let providerVotePower;
        let validFtsoIndexList[];
        let ftsoPriceHashes[];
        let ftsoPrices[];
        let ftsoRandoms[];

        let voterMap = priceSubmitter.voterWhitelistBitmap();

        for (uint i = 0; i < FtsoIndexList.length; i++) { 

            uint ftsoIndex = FtsoIndexList[i];
            // Do not vote on ftsos we don't have an access to
            if(voterMap & (1 << ftsoIndex) == 0){
                continue;
            }

            address ftso = ftsoRegistry.getFtso(ftsoIndex);

            {
                epochId;
                epochSubmitEndTime;
                epochRevealEndTime;
                votePowerBlock;
                isFallbackMode;
            } = ftso.getPriceEpochData();
    
            validFtsoIndexList.push(FtsoIndexList[i]);
    
            // create a new random
            ftsoRandoms.push(rand());
    
            // read token symbol
            let symbol = symbolftso.symbol();
    
            // read price from any chosen price source provider wishes to use
            ftsoPrices.push(priceSource.getPrice(symbol));
    
            uint currentFtso = ftsoPrices.length - 1;
            // create hash of above values and submit
            ftsoPriceHashes[currentFtso] = solidityKeccak256(
                ["uint256", "uint256", "address"],
                [ftsoPrices[currentFtso], ftsoRandoms[currentFtso], providerAddress]
            );
        }
 
        // submit hashes in batch
        if (validFtsoIndexList > 0) {
            priceSubmitter.submitPriceHashes(validFtsoIndexList, ftsoPriceHashes);
        }
 
        // wait for this commit period to end
        waitUntil(epochSubmitEndTime);
 
        // send reveal batch
        if (validFtsoIndexList.length > 0) {
            priceSubmitter.revealPrices(
                epochId,
                validFtsoIndexList,
                ftsoPrices,
                ftsoRandoms
            );
        }


        // Rewhitelist demo
        // This will usually be done in a different scope (when more flare is delegated, when whitelister emits an event...)
        ++step;
        // Try to rewhitelist every 100 epochs
        if(step % 100 == 0){
            for (uint i = 0; i < FtsoIndexList.length; i++) { 
                uint ftsoIndex = FtsoIndexList[i];
                // Rewhitelist only on unavailable
                if(voterMap & (1 << ftsoIndex) == 0){
                    voterWhitelister.requestWhitelistingVoter(providerAddress, ftsoIndex);
                }
            }
        }

    }
}
 
function percentToBips(percent) {
    return percent * 100;
}

function waitUntil(linuxTs) {
    while(now() < linuxTs) {
        // sleep 1 second
        sleep(1);
    }
}
